\documentclass[a4paper]{article}
\usepackage[spanish]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[a4paper,top=2cm,bottom=2cm,left=2cm,right=2cm,marginparwidth=1.75cm]{geometry}
\usepackage{amsmath, amsthm, amsfonts}
\usepackage{graphicx}
\setlength{\marginparwidth}{2cm}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{multicol}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage[colorlinks=true, allcolors=blue]{hyperref}
\usepackage{parskip}
\usepackage{ragged2e}
\usepackage{enumitem}
\usepackage{geometry}
\usepackage{listings}


\title{Memoria de proyecto}
\author{
    \begin{minipage}{0.5\textwidth}
    \centering
    Hugo Herrador Segade\\
    \small h.herrador@udc.es\\
    \end{minipage}
    \begin{minipage}{0.5\textwidth}
    \centering
    Pablo Montes Aldao\\
    \small pablo.montes1@udc.es\\
    \end{minipage}
}
\date{3 de mayo de 2024}

\begin{document}

\maketitle


\section{Introducción}
El presente documento representa la memoria de la cuarta práctica de la asignatura Fundamentos de Programación II (GCED-FP2 614G020092324), desarrollada por Hugo Herrador Segade y Pablo Montes Aldao entre los días 22 de abril de 2024 y 3 de mayo del mismo año.

El programa Python desarrollado pretende abordar la gestión del catálogo de cursos de dos academias de idiomas, permitiendo generar un catálogo de ``oferta agregada'' y otro de oferta común, además de mostrar estadísticas sobre las academias (utilizando la librería pandas).

El programa funciona haciendo uso del TAD AVL, cuyo código se incluye en el directorio AVL.

\section{Guía al usuario}

El programa está diseñado para ser utilizado de forma sencilla y trata de acompañar al usuario a través de los menús para que obtenga lo que desea.

\subsection{Requerimientos}

Para ejecutar el programa se requiere:

\begin{itemize}

\item{Un ordenador con un intérprete de Python (programa encargado de interpretar y ejecutar el código) instalado, versión 3.7 o más reciente}

\item{Un gestor de paquetes y los paquetes indicados en el archivo requirements.txt}

\end{itemize}

\subsection{Mecanismo de ejecución del programa}
En primer lugar, es importante señalar que tanto los archivos de código fuente (main.py, manager.py course.py) como los archivos de código del TAD AVL deben encontrarse en la misma carpeta, sin directorios anidados. 

Para ejecutar el programa el usuario deberá llamar a main.py a través del intérprete de Python. En Linux, se puede hacer abriendo una terminal y ejecutando:

\begin{lstlisting}

python3 main.py

\end{lstlisting}

Al ejecutar el programa, se crea un objeto de clase Manager sobre el que se aplica el método self.launch(). Al ejecutarse esté método, al usuario se le dará la opción de leer dos archivos de texto con datos de academias. Estes deben estar en el mismo formato que los ejemplos ejA.txt y ejB.txt. En caso contrario, se imprimirá un mensaje de error y se cerrará el programa.

Es importante resaltar que los ficheros a leer también se deben encontrar en el mismo directorio que los archivos de código Python. Alternativamente, se puede indicar como nombre de fichero la ruta al mismo.

Una vez leído el archivo, se crearán objetos de clase Course y se almacenarán en árbol AVL, que será un atributo de la clase Manager (academy\_a o academy\_b, según corresponda).

Después se llama al método self.main\_menu(), que es el que gestiona el menú principal. Ahí dependiendo del input del usuario se llama a un método u otro para gestionar su petición. Después de satisfacerla, se vuelve a llamar a self.back\_main() para volver al menú principal haciendo un efecto de espera. Veamos las opciones del usuario:

\begin{itemize}

\item{Realizar la operación ``oferta agregada'' y visualizar el resultado. En caso de cursos iguales, se selecciona el curso con mayor beneficio (precio por hora y estudiante) y el número de estudiantes de los grupos fusionados se
suma.} % AÑADIR En caso de nombres de cursos iguales, se añade el nombre de la compañía

\item{Realizar la operación “oferta común” y visualizar el resultado. Se opera de la misma forma que en la opción anterior, seleccionando el curso de máximo beneficio en caso de haber varios iguales.}

\item{Mostrar varias métricas (número medio de estudiantes por idioma, número medio de estudiantes por nivel e ingresos totales posibles), haciendo uso de la librería pandas. Para esto utilizamos el método self.show\_stats() que crea un dataframe con la información de cada academia y calcula estadísticas sobre estos.}

\end{itemize}

\section{Fases de desarrollo}

\subsection{Fase I: Creación de la clase Course en el módulo course.py}

En primer lugar, creamos la clase Course para representar cada una de los cursos. Contiene una serie de atributos comunes a todos los cursos (name, duration, enrolment, level, language, price, academy), que inicializaremos usando el método mágico \_\_init\_\_. Siguiendo la convención de  \textit{estilo Pythonic}, definiremos métodos de acceso y modificación para los atributos, utilizando los decoradores @property y @setter.

Además, redefinimos el método mágico \_\_hash\_\_(self) para obtener un identificador único para cada curso distinto y definimos también los métodos mágicos \_\_eq\_\_(self, other) y \_\_gt\_\_(self, other) para comparaciones entre objetos de la clase. 

\subsection{Fase II: Implementación de la clase Manager en manager.py}

Una vez desarrollada la clase Film, comenzamos con la clase Manager, que se encargará de la gestión de los árboles. En esta clase incluimos los atributos y métodos necesarios para los procesos que queramos que se puedan realizar. Necesitaremos los siguientes atributos, que inicializaremos en el \_\_init\_\_:

\begin{itemize}

\item{academy\_a: Donde se almacenará un árbol con los cursos de la academia ``A''. Inicialmente None.}
\item{academy\_b: Donde se almacenará un árbol con los cursos de la academia ``B''. Inicialmente None.}
\item{common: Árbol con los cursos comunes a ambas academia. Inicialmente es un árbol vacío}
\item{aggregate: Árbol con la oferta agregada de ambas academia. Inicialmente es un árbol vacío}
\item{done: Lista auxiliar para mantener registro de los cálculos que ya se han realizado. Inicialmente lista vacía.}

\end{itemize}

Además, desarrollamos los siguientes métodos:
\begin{itemize}

\item{read\_file(self): Que permite leer el archivo, crear objetos de clase Course y almacenarlos en un árbol AVL.}

\item{launch(self): Para gestionar el primer menú con el que tiene que interactuar el usuario cuando corre el programa. En este se le pide al usuario el nombre de los archivos que quiere leer.}

\item{main\_menu(self): Es el menú principal del programa. Permite al usuario decidir qué quiere hacer con los datos y llama al método que permita gestionar la petición.}

\item{comm\_offer(self): Crea un árbol con la ``oferta común'' (los cursos ofertados en ambas academias) y lo almacena en el atributo common. Si este árbol ya había sido creado antes llama al método self.warning()}

\item{agg\_offer(self): Crea un árbol con la ``oferta común'' (los cursos ofertados en ambas academias) y lo almacena en el atributo common. Si este árbol ya había sido creado antes llama al método self.warning()}

\item{warning(self): Lanza un aviso al usuario si ya ha calculado el árbol que pide, y le pregunta si quiere volver a imprimirlo (sin calcular lo mismo de nuevo)}

\item{back\_main(self): Vuelve al menú principal con esperas, simulando una pantalla de carga}

\end{itemize}

Por último, creamos un archivo main.py en el que se crea un objeto de la clase Manager y se le aplica el método self.launch(), para comenzar el programa.

\newpage

\subsection{Fase III: Cálculo de estadísticas con pandas}

Ahora queremos desarrollar un método show\_stats(self) que muestre diversas estadísticas sobre las academias.

Creamos variables data\_a y data\_b para almacenar listas con datos de los cursos de las academias A y B, respectivamente. Después convertimos dichas listas a dataframe para obtener:

\begin{itemize}

\item{Número medio de estudiantes por idioma}

\item{Número medio de estudiantes por nivel}

\item{Ingresos totales posibles}

\end{itemize}


\section{Resultados y discusión}

Se realizó un programa Python (main.py) que permite al usuario, a partir de dos ficheros de texto con datos de academias: almacenar los datos en árboles AVL, crear árboles con la oferta agregada y la oferta común y mostrar estadísticas de las academias.

No se detecta ningún error en el funcionamiento del programa tras realizar exhaustivas pruebas con ficheros de prueba creados, de entre 1 y 2000 cursos, con y sin repetidos.

\end{document}